
#' @title Calculates the rate of change per hour
#' @description calculates the difference per hour, based on the difference per time step
#' @param Data A list with numeric values
#' @param Date_Time The Date and time as.POSIXct
#' @param filter_extreem TRUE or FALSE
#' @param Filter_time_above Time in minutes
#' @param Filter_time_below Time in minutes
#' @return The moving average of \code{Data} for \code{Steps} steps.
#' @examples
#' Change_perHour(DIC, Date_time, TRUE, 60, 2)


Change_perHour <- function(Data, Date_Time, filter_extreem, Filter_time_above, Filter_time_below) {


  # Calculate the difference in Data_vector
  Diff_Data <- append(diff(Data), 0, 0)


  # Calculate the time difference, per step.
  ind_j <- 1:(length(Data)-1)
  ind_k <- 2:length(Data)
  ind_w <- 1:length(Data)

  TimeDif <- as.array(Diff_Data)

  for (i in seq_along(ind_j)){
    TimeDif[ind_k[i]] <-
      60/(as.double(Date_Time[ind_k[i]] - Date_Time[ind_j[i]]))
  }

  TimeDif[1] <- 0


  # Filters out extreme time differences
  if(filter_extreem == TRUE) {


    if( Filter_time_above == 0 & Filter_time_below == 0 ) {

    }

    else{

      if(Filter_time_above == 0 & Filter_time_below != 0) {
        TimeDif[TimeDif > 60/Filter_time_below] = NA
      }

      else {

        if(Filter_time_above != 0 & Filter_time_below == 0) {
          TimeDif[TimeDif < 60/Filter_time_above] = NA
        }

        else {
          TimeDif[TimeDif < 60/Filter_time_above | TimeDif > 60/Filter_time_below] = NA
        }

      }
    }

    Out <- Diff_Data *   TimeDif

  }

  else  {

    Out <- Diff_Data * TimeDif

  }

  return(Out)

}

